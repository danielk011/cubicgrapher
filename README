This cubic graphing software uses both Julia and Sage to animate a series of cubic surfaces. The parameter space used is in four dimensions; there's one coefficient for each linear form a,b,c,d. When the program is run, a random plane through the origin is chosen generated by v1 and v2, and a random vector "base" is selected to translate the plane.
The intersection of the discriminant with this translated plane is provided as the vanishing locus of the polynomial disc(x,y). 

You will notice that sometimes the number of lines is not 3,7,15,27 (which is the proven number of lines on a real smooth cubic). This may be due to the lines being at the plane at infinity or that the cubic is close to the discriminant. One way this program could be improved is to identify more lines accurately. The program already checks the existence of lines against multiple planes, and reduces redundancy by removing lines extremely close to each other. The threshold for closeness may be further calibrated to the user's liking as the threshold variable in compareAdjustedLines.

INSTALLATION:
These instructions assume you are running linux. Place cubics file in desired directory. Run "julia cubicplot.jl" to run the program. Afterwards, the program will store a runnable sage file that contains the information for the animations. There are multiple ways to run the sage file, but one way to get it working is to run a Jupyter notebook with the sage code. After installing sage, run "sage -n" to open a notebook. From there, paste the code from cubicgraph.sage into the notebook, and run it with CTRL+ENTER.
Data from previous runs is stored in the history file. The specific information for the cubics is in the cubichistory-n file. To obtain previously received results, substitute the values of v1,v2, and base into the cubicplot.jl file, and re-run. Change the values back to random when you wish to obtain random results again. 
You may wish to choose loops that go around discriminant components. Plot the discriminant polynomial disc(x,y) provided in the output or in the cubichistory file implicitly in your software of choice, and choose the loop by modifying the u(t) function accordingly. For instance, by default the loop is the unit circle based at (3,4) where the loop starts from (3,4+cos(0))=(3,5).

